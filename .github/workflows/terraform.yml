name: Terraform AKS Deployment

on:
  workflow_dispatch:  # This allows the workflow to be manually triggered
    inputs:           # Optional: Define inputs if you want to pass parameters
      cluster_name:   # Example of an input field for the manual trigger
        description: "Name of the AKS Cluster"
        required: true
        default: "my-cluster"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Login to Azure
      run: |
        az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} \
                 -p ${{ secrets.ARM_CLIENT_SECRET }} \
                 --tenant ${{ secrets.ARM_TENANT_ID }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve

    - name: Capture Terraform Outputs
      id: outputs
      run: |
        # Capture raw output of the Terraform variables
        raw_cluster_name=$(terraform output -json aks_cluster_name 2>/dev/null || terraform output aks_cluster_name)
        raw_resource_group=$(terraform output -json aks_resource_group 2>/dev/null || terraform output aks_resource_group)
        
        # Debug raw outputs to verify what we're working with
        echo "Raw AKS Cluster Name: $raw_cluster_name"
        echo "Raw Resource Group: $raw_resource_group"

        # Handle JSON parsing only if output is in JSON format
        if [[ $raw_cluster_name == \{* ]]; then
          AKS_CLUSTER_NAME=$(echo "$raw_cluster_name" | jq -r '.value // empty')
        else
          AKS_CLUSTER_NAME=$raw_cluster_name
        fi

        if [[ $raw_resource_group == \{* ]]; then
          RESOURCE_GROUP=$(echo "$raw_resource_group" | jq -r '.value // empty')
        else
          RESOURCE_GROUP=$raw_resource_group
        fi

        # Output final values for debugging
        echo "AKS_CLUSTER_NAME is $AKS_CLUSTER_NAME"
        echo "RESOURCE_GROUP is $RESOURCE_GROUP"

        # Export values to GitHub environment
        echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV

    # Install kubectl
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3

    # Deploy application to AKS using Kubernetes manifests
    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s-manifests/deployment.yaml
        kubectl apply -f k8s-manifests/service.yaml
